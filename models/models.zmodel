model Contract {

    id                String        @id @default(uuid())  
    content      String?          
    fileUrl      String?          
    status        String?          

userId        String          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
 
    clauses      Clause[]    @relation("contract")  
      dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Clause {

    id                String        @id @default(uuid())  
    content      String?          
    isImportant  Boolean?        
    aiAnalysis  String?          

    contractId  String          
    contract    Contract?    @relation(fields: [contractId], references: [id], name:"contract")  
 
    dateCreated DateTime @default(now())
    dateUpdated DateTime @updatedAt  @default(now())
    @@allow("all", true)
}

enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                String             @id @default(uuid())
    name              String?
    email             String?            @unique
    pictureurl        String?            @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation   String?
    emailVerified     Boolean?
    
    stripeCustomerId  String?
    
    status            UserStatus         @default(VERIFIED)

    // this is the role of the user for the application
    globalRole        String             @default('USER')
    password          String?            @password @omit
    dateCreated       DateTime           @default(now())
    dateUpdated       DateTime           @updatedAt @default(now())
    accounts          Account[]
    sessions          Session[]
    pushNotifications PushNotification[] @relation("user")
    contracts         Contract[]         @relation("user")
    subscriptions     Subscription[]     @relation("user")

    @@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model PushNotification {
    id           String   @id @default(uuid())
    endpoint     String
    subscription String
    dateCreated  DateTime @default(now())
    dateUpdated  DateTime @updatedAt @default(now())

    userId       String
    user         User     @relation(fields: [userId], references: [id], name: 'user')

@@allow("all", true)
}

model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])

    @@allow("all", auth().id == user.id)
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@allow("all", auth().id == user.id)
}

/// @@allow('all', true)
model Subscription {
  id          String   @id() @default(uuid())
  userId      String
  plan        String
  isActive    Boolean
  startDate   DateTime
  endDate     DateTime?
  tier        SubscriptionTier? @relation(fields: [plan], references: [id], name: "tier")

  user        User     @relation(fields: [userId], references: [id], name: "user")

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SubscriptionTier {
  id          String   @id() @default(uuid())
  title        String
  description String?
  monthly Float
  yearly  Float
  features    String[]
  subscriptions Subscription[] @relation("tier")

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}
